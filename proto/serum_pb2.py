# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/serum.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from proto import basic_pb2 as proto_dot_basic__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x11proto/serum.proto\x12\x05serum\x1a\x11proto/basic.proto\"[\n\x0bMarketState\x12\x1b\n\x02id\x18\x01 \x01(\x0b\x32\r.basic.PubkeyH\x00\x12%\n\x05state\x18\x02 \x01(\x0b\x32\x14.serum.MarketPubkeysH\x00\x42\x08\n\x06market\"\xa2\x01\n\x14InitOpenOrderRequest\x12(\n\x0e\x64\x65x_program_id\x18\x01 \x01(\x0b\x32\x10.basic.ProgramId\x12\x1d\n\x05owner\x18\x02 \x01(\x0b\x32\x0e.basic.Keypair\x12\"\n\x06market\x18\x03 \x01(\x0b\x32\x12.serum.MarketState\x12\x1d\n\x06orders\x18\x04 \x01(\x0b\x32\r.basic.Pubkey\"\xa3\x01\n\x15\x43loseOpenOrderRequest\x12(\n\x0e\x64\x65x_program_id\x18\x01 \x01(\x0b\x32\x10.basic.ProgramId\x12\x1d\n\x05owner\x18\x02 \x01(\x0b\x32\x0e.basic.Keypair\x12\"\n\x06market\x18\x03 \x01(\x0b\x32\x12.serum.MarketState\x12\x1d\n\x06orders\x18\x04 \x01(\x0b\x32\r.basic.Pubkey\"\xac\x01\n\x12\x43\x61ncelOrderRequest\x12(\n\x0e\x64\x65x_program_id\x18\x01 \x01(\x0b\x32\x10.basic.ProgramId\x12\x1d\n\x05owner\x18\x02 \x01(\x0b\x32\x0e.basic.Keypair\x12\"\n\x06market\x18\x03 \x01(\x0b\x32\x12.serum.MarketState\x12\x1d\n\x06orders\x18\x04 \x01(\x0b\x32\r.basic.Pubkey\x12\n\n\x02id\x18\x05 \x01(\x04\"_\n\x12ListMarketResponse\x12,\n\x0emarket_pubkeys\x18\x01 \x01(\x0b\x32\x14.serum.MarketPubkeys\x12\x1b\n\x02tx\x18\x02 \x01(\x0b\x32\x0f.basic.SignedTx\"\xe7\x01\n\x05Order\x12*\n\x02v3\x18\x01 \x01(\x0b\x32\x1c.serum.NewOrderInstructionV3H\x00\x12(\n\x0e\x64\x65x_program_id\x18\x02 \x01(\x0b\x32\x10.basic.ProgramId\x12\x1d\n\x05payer\x18\x03 \x01(\x0b\x32\x0e.basic.Keypair\x12\x1d\n\x06wallet\x18\x04 \x01(\x0b\x32\r.basic.Pubkey\x12\"\n\x06market\x18\x05 \x01(\x0b\x32\x12.serum.MarketState\x12\x1d\n\x06orders\x18\x06 \x01(\x0b\x32\r.basic.PubkeyB\x07\n\x05order\"@\n\x0bOrderStatus\x12\x31\n\x10status_with_slot\x18\x01 \x01(\x0b\x32\x17.basic.TxStatusWithSlot\"\xff\x01\n\x15NewOrderInstructionV3\x12\x0c\n\x04side\x18\x01 \x01(\x08\x12\x13\n\x0blimit_price\x18\x02 \x01(\x04\x12\x14\n\x0cmax_coin_qty\x18\x03 \x01(\x04\x12(\n max_native_pc_qty_including_fees\x18\x04 \x01(\x04\x12\x35\n\x13self_trade_behavior\x18\x05 \x01(\x0e\x32\x18.serum.SelfTradeBehavior\x12$\n\norder_type\x18\x06 \x01(\x0e\x32\x10.serum.OrderType\x12\x17\n\x0f\x63lient_order_id\x18\x07 \x01(\x04\x12\r\n\x05limit\x18\x08 \x01(\r\"F\n\x05\x45vent\x12\x19\n\x03\x62id\x18\x01 \x01(\x0b\x32\n.serum.BidH\x00\x12\x19\n\x03\x61sk\x18\x02 \x01(\x0b\x32\n.serum.AskH\x00\x42\x07\n\x05\x65vent\"\x05\n\x03\x42id\"\x05\n\x03\x41sk\"9\n\x12\x43onsumeEventUpdate\x12\x13\n\x0b\x63rank_count\x18\x01 \x01(\x03\x12\x0e\n\x06status\x18\x02 \x01(\t\"\x93\x02\n\rMarketPubkeys\x12\x1d\n\x06market\x18\x01 \x01(\x0b\x32\r.basic.Pubkey\x12\x1c\n\x05req_q\x18\x02 \x01(\x0b\x32\r.basic.Pubkey\x12\x1e\n\x07\x65vent_q\x18\x03 \x01(\x0b\x32\r.basic.Pubkey\x12\x1b\n\x04\x62ids\x18\x04 \x01(\x0b\x32\r.basic.Pubkey\x12\x1b\n\x04\x61sks\x18\x05 \x01(\x0b\x32\r.basic.Pubkey\x12!\n\ncoin_vault\x18\x06 \x01(\x0b\x32\r.basic.Pubkey\x12\x1f\n\x08pc_vault\x18\x07 \x01(\x0b\x32\r.basic.Pubkey\x12\'\n\x10vault_signer_key\x18\x08 \x01(\x0b\x32\r.basic.Pubkey\"\xdf\x02\n\x14\x43onsumeEventsRequest\x12(\n\x0e\x64\x65x_program_id\x18\x01 \x01(\x0b\x32\x10.basic.ProgramId\x12\x1d\n\x05payer\x18\x02 \x01(\x0b\x32\x0e.basic.Keypair\x12\"\n\x06market\x18\x03 \x01(\x0b\x32\x12.serum.MarketState\x12\"\n\x0b\x63oin_wallet\x18\x04 \x01(\x0b\x32\r.basic.Pubkey\x12 \n\tpc_wallet\x18\x05 \x01(\x0b\x32\r.basic.Pubkey\x12\x13\n\x0bnum_workers\x18\x06 \x01(\x04\x12\x19\n\x11\x65vents_per_worker\x18\x07 \x01(\x04\x12\x14\n\x0cnum_accounts\x18\x08 \x01(\x04\x12\x15\n\rlog_directory\x18\t \x01(\t\x12\x14\n\x0cmax_q_length\x18\n \x01(\x04\x12!\n\x19max_wait_for_events_delay\x18\x0b \x01(\x04\"\xc7\x01\n\x12MatchOrdersRequest\x12(\n\x0e\x64\x65x_program_id\x18\x01 \x01(\x0b\x32\x10.basic.ProgramId\x12\x1d\n\x05payer\x18\x02 \x01(\x0b\x32\x0e.basic.Keypair\x12\"\n\x06market\x18\x03 \x01(\x0b\x32\x12.serum.MarketState\x12\"\n\x0b\x63oin_wallet\x18\x04 \x01(\x0b\x32\r.basic.Pubkey\x12 \n\tpc_wallet\x18\x05 \x01(\x0b\x32\r.basic.Pubkey\"q\n\x13MonitorQueueRequest\x12(\n\x0e\x64\x65x_program_id\x18\x01 \x01(\x0b\x32\x10.basic.ProgramId\x12\"\n\x06market\x18\x02 \x01(\x0b\x32\x12.serum.MarketState\x12\x0c\n\x04port\x18\x03 \x01(\r\"Z\n\x0fPrintEventQueue\x12(\n\x0e\x64\x65x_program_id\x18\x01 \x01(\x0b\x32\x10.basic.ProgramId\x12\x1d\n\x06market\x18\x02 \x01(\x0b\x32\r.basic.Pubkey\"W\n\x0cWholeShebang\x12\x1d\n\x05payer\x18\x01 \x01(\x0b\x32\x0e.basic.Keypair\x12(\n\x0e\x64\x65x_program_id\x18\x02 \x01(\x0b\x32\x10.basic.ProgramId\"\x86\x02\n\x12SettleFundsRequest\x12\x1d\n\x05payer\x18\x01 \x01(\x0b\x32\x0e.basic.Keypair\x12(\n\x0e\x64\x65x_program_id\x18\x02 \x01(\x0b\x32\x10.basic.ProgramId\x12\"\n\x06market\x18\x03 \x01(\x0b\x32\x12.serum.MarketState\x12\x1d\n\x06orders\x18\x04 \x01(\x0b\x32\r.basic.Pubkey\x12\"\n\x0b\x63oin_wallet\x18\x05 \x01(\x0b\x32\r.basic.Pubkey\x12 \n\tpc_wallet\x18\x06 \x01(\x0b\x32\r.basic.Pubkey\x12\x1e\n\x06signer\x18\x07 \x01(\x0b\x32\x0e.basic.Keypair\"\xca\x01\n\x11ListMarketRequest\x12\x1d\n\x05payer\x18\x01 \x01(\x0b\x32\x0e.basic.Keypair\x12(\n\x0e\x64\x65x_program_id\x18\x02 \x01(\x0b\x32\x10.basic.ProgramId\x12 \n\tcoin_mint\x18\x03 \x01(\x0b\x32\r.basic.Pubkey\x12\x1e\n\x07pc_mint\x18\x04 \x01(\x0b\x32\r.basic.Pubkey\x12\x15\n\rcoin_lot_size\x18\x05 \x01(\x04\x12\x13\n\x0bpc_lot_size\x18\x06 \x01(\x04\"[\n\x16InitializeTokenAccount\x12\x1b\n\x04mint\x18\x01 \x01(\x0b\x32\r.basic.Pubkey\x12$\n\rowner_account\x18\x02 \x01(\x0b\x32\r.basic.Pubkey\"X\n\rMarketRequest\x12(\n\x0e\x64\x65x_program_id\x18\x01 \x01(\x0b\x32\x10.basic.ProgramId\x12\x1d\n\x06market\x18\x02 \x01(\x0b\x32\r.basic.Pubkey*O\n\x11SelfTradeBehavior\x12\x11\n\rDecrementTake\x10\x00\x12\x11\n\rCancelProvide\x10\x01\x12\x14\n\x10\x41\x62ortTransaction\x10\x02*;\n\tOrderType\x12\t\n\x05Limit\x10\x00\x12\x15\n\x11ImmediateOrCancel\x10\x01\x12\x0c\n\x08PostOnly\x10\x02\x32\xf4\x04\n\x03\x44\x65x\x12@\n\x10GetMarketPubkeys\x12\x14.serum.MarketRequest\x1a\x14.serum.MarketPubkeys\"\x00\x12\x43\n\nListMarket\x12\x18.serum.ListMarketRequest\x1a\x19.serum.ListMarketResponse\"\x00\x12?\n\rConsumeEvents\x12\x1b.serum.ConsumeEventsRequest\x1a\x0f.basic.SignedTx\"\x00\x12?\n\rInitOpenOrder\x12\x1b.serum.InitOpenOrderRequest\x1a\x0f.basic.SignedTx\"\x00\x12+\n\x08NewOrder\x12\x0c.serum.Order\x1a\x0f.basic.SignedTx\"\x00\x12;\n\x0b\x43\x61ncelOrder\x12\x19.serum.CancelOrderRequest\x1a\x0f.basic.SignedTx\"\x00\x12;\n\x0bSettleFunds\x12\x19.serum.SettleFundsRequest\x1a\x0f.basic.SignedTx\"\x00\x12\x42\n\x0f\x43loseOpenOrders\x12\x1c.serum.CloseOpenOrderRequest\x1a\x0f.basic.SignedTx\"\x00\x12;\n\x0bMatchOrders\x12\x19.serum.MatchOrdersRequest\x1a\x0f.basic.SignedTx\"\x00\x12<\n\x0cMonitorQueue\x12\x1a.serum.MonitorQueueRequest\x1a\x0c.serum.Event\"\x00\x30\x01\x42\x30Z.github.com/SolmateDev/go-rust-translator/serumb\x06proto3')

_SELFTRADEBEHAVIOR = DESCRIPTOR.enum_types_by_name['SelfTradeBehavior']
SelfTradeBehavior = enum_type_wrapper.EnumTypeWrapper(_SELFTRADEBEHAVIOR)
_ORDERTYPE = DESCRIPTOR.enum_types_by_name['OrderType']
OrderType = enum_type_wrapper.EnumTypeWrapper(_ORDERTYPE)
DecrementTake = 0
CancelProvide = 1
AbortTransaction = 2
Limit = 0
ImmediateOrCancel = 1
PostOnly = 2


_MARKETSTATE = DESCRIPTOR.message_types_by_name['MarketState']
_INITOPENORDERREQUEST = DESCRIPTOR.message_types_by_name['InitOpenOrderRequest']
_CLOSEOPENORDERREQUEST = DESCRIPTOR.message_types_by_name['CloseOpenOrderRequest']
_CANCELORDERREQUEST = DESCRIPTOR.message_types_by_name['CancelOrderRequest']
_LISTMARKETRESPONSE = DESCRIPTOR.message_types_by_name['ListMarketResponse']
_ORDER = DESCRIPTOR.message_types_by_name['Order']
_ORDERSTATUS = DESCRIPTOR.message_types_by_name['OrderStatus']
_NEWORDERINSTRUCTIONV3 = DESCRIPTOR.message_types_by_name['NewOrderInstructionV3']
_EVENT = DESCRIPTOR.message_types_by_name['Event']
_BID = DESCRIPTOR.message_types_by_name['Bid']
_ASK = DESCRIPTOR.message_types_by_name['Ask']
_CONSUMEEVENTUPDATE = DESCRIPTOR.message_types_by_name['ConsumeEventUpdate']
_MARKETPUBKEYS = DESCRIPTOR.message_types_by_name['MarketPubkeys']
_CONSUMEEVENTSREQUEST = DESCRIPTOR.message_types_by_name['ConsumeEventsRequest']
_MATCHORDERSREQUEST = DESCRIPTOR.message_types_by_name['MatchOrdersRequest']
_MONITORQUEUEREQUEST = DESCRIPTOR.message_types_by_name['MonitorQueueRequest']
_PRINTEVENTQUEUE = DESCRIPTOR.message_types_by_name['PrintEventQueue']
_WHOLESHEBANG = DESCRIPTOR.message_types_by_name['WholeShebang']
_SETTLEFUNDSREQUEST = DESCRIPTOR.message_types_by_name['SettleFundsRequest']
_LISTMARKETREQUEST = DESCRIPTOR.message_types_by_name['ListMarketRequest']
_INITIALIZETOKENACCOUNT = DESCRIPTOR.message_types_by_name['InitializeTokenAccount']
_MARKETREQUEST = DESCRIPTOR.message_types_by_name['MarketRequest']
MarketState = _reflection.GeneratedProtocolMessageType('MarketState', (_message.Message,), {
  'DESCRIPTOR' : _MARKETSTATE,
  '__module__' : 'proto.serum_pb2'
  # @@protoc_insertion_point(class_scope:serum.MarketState)
  })
_sym_db.RegisterMessage(MarketState)

InitOpenOrderRequest = _reflection.GeneratedProtocolMessageType('InitOpenOrderRequest', (_message.Message,), {
  'DESCRIPTOR' : _INITOPENORDERREQUEST,
  '__module__' : 'proto.serum_pb2'
  # @@protoc_insertion_point(class_scope:serum.InitOpenOrderRequest)
  })
_sym_db.RegisterMessage(InitOpenOrderRequest)

CloseOpenOrderRequest = _reflection.GeneratedProtocolMessageType('CloseOpenOrderRequest', (_message.Message,), {
  'DESCRIPTOR' : _CLOSEOPENORDERREQUEST,
  '__module__' : 'proto.serum_pb2'
  # @@protoc_insertion_point(class_scope:serum.CloseOpenOrderRequest)
  })
_sym_db.RegisterMessage(CloseOpenOrderRequest)

CancelOrderRequest = _reflection.GeneratedProtocolMessageType('CancelOrderRequest', (_message.Message,), {
  'DESCRIPTOR' : _CANCELORDERREQUEST,
  '__module__' : 'proto.serum_pb2'
  # @@protoc_insertion_point(class_scope:serum.CancelOrderRequest)
  })
_sym_db.RegisterMessage(CancelOrderRequest)

ListMarketResponse = _reflection.GeneratedProtocolMessageType('ListMarketResponse', (_message.Message,), {
  'DESCRIPTOR' : _LISTMARKETRESPONSE,
  '__module__' : 'proto.serum_pb2'
  # @@protoc_insertion_point(class_scope:serum.ListMarketResponse)
  })
_sym_db.RegisterMessage(ListMarketResponse)

Order = _reflection.GeneratedProtocolMessageType('Order', (_message.Message,), {
  'DESCRIPTOR' : _ORDER,
  '__module__' : 'proto.serum_pb2'
  # @@protoc_insertion_point(class_scope:serum.Order)
  })
_sym_db.RegisterMessage(Order)

OrderStatus = _reflection.GeneratedProtocolMessageType('OrderStatus', (_message.Message,), {
  'DESCRIPTOR' : _ORDERSTATUS,
  '__module__' : 'proto.serum_pb2'
  # @@protoc_insertion_point(class_scope:serum.OrderStatus)
  })
_sym_db.RegisterMessage(OrderStatus)

NewOrderInstructionV3 = _reflection.GeneratedProtocolMessageType('NewOrderInstructionV3', (_message.Message,), {
  'DESCRIPTOR' : _NEWORDERINSTRUCTIONV3,
  '__module__' : 'proto.serum_pb2'
  # @@protoc_insertion_point(class_scope:serum.NewOrderInstructionV3)
  })
_sym_db.RegisterMessage(NewOrderInstructionV3)

Event = _reflection.GeneratedProtocolMessageType('Event', (_message.Message,), {
  'DESCRIPTOR' : _EVENT,
  '__module__' : 'proto.serum_pb2'
  # @@protoc_insertion_point(class_scope:serum.Event)
  })
_sym_db.RegisterMessage(Event)

Bid = _reflection.GeneratedProtocolMessageType('Bid', (_message.Message,), {
  'DESCRIPTOR' : _BID,
  '__module__' : 'proto.serum_pb2'
  # @@protoc_insertion_point(class_scope:serum.Bid)
  })
_sym_db.RegisterMessage(Bid)

Ask = _reflection.GeneratedProtocolMessageType('Ask', (_message.Message,), {
  'DESCRIPTOR' : _ASK,
  '__module__' : 'proto.serum_pb2'
  # @@protoc_insertion_point(class_scope:serum.Ask)
  })
_sym_db.RegisterMessage(Ask)

ConsumeEventUpdate = _reflection.GeneratedProtocolMessageType('ConsumeEventUpdate', (_message.Message,), {
  'DESCRIPTOR' : _CONSUMEEVENTUPDATE,
  '__module__' : 'proto.serum_pb2'
  # @@protoc_insertion_point(class_scope:serum.ConsumeEventUpdate)
  })
_sym_db.RegisterMessage(ConsumeEventUpdate)

MarketPubkeys = _reflection.GeneratedProtocolMessageType('MarketPubkeys', (_message.Message,), {
  'DESCRIPTOR' : _MARKETPUBKEYS,
  '__module__' : 'proto.serum_pb2'
  # @@protoc_insertion_point(class_scope:serum.MarketPubkeys)
  })
_sym_db.RegisterMessage(MarketPubkeys)

ConsumeEventsRequest = _reflection.GeneratedProtocolMessageType('ConsumeEventsRequest', (_message.Message,), {
  'DESCRIPTOR' : _CONSUMEEVENTSREQUEST,
  '__module__' : 'proto.serum_pb2'
  # @@protoc_insertion_point(class_scope:serum.ConsumeEventsRequest)
  })
_sym_db.RegisterMessage(ConsumeEventsRequest)

MatchOrdersRequest = _reflection.GeneratedProtocolMessageType('MatchOrdersRequest', (_message.Message,), {
  'DESCRIPTOR' : _MATCHORDERSREQUEST,
  '__module__' : 'proto.serum_pb2'
  # @@protoc_insertion_point(class_scope:serum.MatchOrdersRequest)
  })
_sym_db.RegisterMessage(MatchOrdersRequest)

MonitorQueueRequest = _reflection.GeneratedProtocolMessageType('MonitorQueueRequest', (_message.Message,), {
  'DESCRIPTOR' : _MONITORQUEUEREQUEST,
  '__module__' : 'proto.serum_pb2'
  # @@protoc_insertion_point(class_scope:serum.MonitorQueueRequest)
  })
_sym_db.RegisterMessage(MonitorQueueRequest)

PrintEventQueue = _reflection.GeneratedProtocolMessageType('PrintEventQueue', (_message.Message,), {
  'DESCRIPTOR' : _PRINTEVENTQUEUE,
  '__module__' : 'proto.serum_pb2'
  # @@protoc_insertion_point(class_scope:serum.PrintEventQueue)
  })
_sym_db.RegisterMessage(PrintEventQueue)

WholeShebang = _reflection.GeneratedProtocolMessageType('WholeShebang', (_message.Message,), {
  'DESCRIPTOR' : _WHOLESHEBANG,
  '__module__' : 'proto.serum_pb2'
  # @@protoc_insertion_point(class_scope:serum.WholeShebang)
  })
_sym_db.RegisterMessage(WholeShebang)

SettleFundsRequest = _reflection.GeneratedProtocolMessageType('SettleFundsRequest', (_message.Message,), {
  'DESCRIPTOR' : _SETTLEFUNDSREQUEST,
  '__module__' : 'proto.serum_pb2'
  # @@protoc_insertion_point(class_scope:serum.SettleFundsRequest)
  })
_sym_db.RegisterMessage(SettleFundsRequest)

ListMarketRequest = _reflection.GeneratedProtocolMessageType('ListMarketRequest', (_message.Message,), {
  'DESCRIPTOR' : _LISTMARKETREQUEST,
  '__module__' : 'proto.serum_pb2'
  # @@protoc_insertion_point(class_scope:serum.ListMarketRequest)
  })
_sym_db.RegisterMessage(ListMarketRequest)

InitializeTokenAccount = _reflection.GeneratedProtocolMessageType('InitializeTokenAccount', (_message.Message,), {
  'DESCRIPTOR' : _INITIALIZETOKENACCOUNT,
  '__module__' : 'proto.serum_pb2'
  # @@protoc_insertion_point(class_scope:serum.InitializeTokenAccount)
  })
_sym_db.RegisterMessage(InitializeTokenAccount)

MarketRequest = _reflection.GeneratedProtocolMessageType('MarketRequest', (_message.Message,), {
  'DESCRIPTOR' : _MARKETREQUEST,
  '__module__' : 'proto.serum_pb2'
  # @@protoc_insertion_point(class_scope:serum.MarketRequest)
  })
_sym_db.RegisterMessage(MarketRequest)

_DEX = DESCRIPTOR.services_by_name['Dex']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'Z.github.com/SolmateDev/go-rust-translator/serum'
  _SELFTRADEBEHAVIOR._serialized_start=3229
  _SELFTRADEBEHAVIOR._serialized_end=3308
  _ORDERTYPE._serialized_start=3310
  _ORDERTYPE._serialized_end=3369
  _MARKETSTATE._serialized_start=47
  _MARKETSTATE._serialized_end=138
  _INITOPENORDERREQUEST._serialized_start=141
  _INITOPENORDERREQUEST._serialized_end=303
  _CLOSEOPENORDERREQUEST._serialized_start=306
  _CLOSEOPENORDERREQUEST._serialized_end=469
  _CANCELORDERREQUEST._serialized_start=472
  _CANCELORDERREQUEST._serialized_end=644
  _LISTMARKETRESPONSE._serialized_start=646
  _LISTMARKETRESPONSE._serialized_end=741
  _ORDER._serialized_start=744
  _ORDER._serialized_end=975
  _ORDERSTATUS._serialized_start=977
  _ORDERSTATUS._serialized_end=1041
  _NEWORDERINSTRUCTIONV3._serialized_start=1044
  _NEWORDERINSTRUCTIONV3._serialized_end=1299
  _EVENT._serialized_start=1301
  _EVENT._serialized_end=1371
  _BID._serialized_start=1373
  _BID._serialized_end=1378
  _ASK._serialized_start=1380
  _ASK._serialized_end=1385
  _CONSUMEEVENTUPDATE._serialized_start=1387
  _CONSUMEEVENTUPDATE._serialized_end=1444
  _MARKETPUBKEYS._serialized_start=1447
  _MARKETPUBKEYS._serialized_end=1722
  _CONSUMEEVENTSREQUEST._serialized_start=1725
  _CONSUMEEVENTSREQUEST._serialized_end=2076
  _MATCHORDERSREQUEST._serialized_start=2079
  _MATCHORDERSREQUEST._serialized_end=2278
  _MONITORQUEUEREQUEST._serialized_start=2280
  _MONITORQUEUEREQUEST._serialized_end=2393
  _PRINTEVENTQUEUE._serialized_start=2395
  _PRINTEVENTQUEUE._serialized_end=2485
  _WHOLESHEBANG._serialized_start=2487
  _WHOLESHEBANG._serialized_end=2574
  _SETTLEFUNDSREQUEST._serialized_start=2577
  _SETTLEFUNDSREQUEST._serialized_end=2839
  _LISTMARKETREQUEST._serialized_start=2842
  _LISTMARKETREQUEST._serialized_end=3044
  _INITIALIZETOKENACCOUNT._serialized_start=3046
  _INITIALIZETOKENACCOUNT._serialized_end=3137
  _MARKETREQUEST._serialized_start=3139
  _MARKETREQUEST._serialized_end=3227
  _DEX._serialized_start=3372
  _DEX._serialized_end=4000
# @@protoc_insertion_point(module_scope)
